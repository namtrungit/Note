Basic:
	- [abc]: single char must be "a or b or c"
	- abc: single char must be 'abc'
	- ^: begin char
	- $: end char
	- [^abc]: everything except abc
	- \d: digit
	- \D: not digit
	- \s: space
	- \S: not space
	- \w: word (equal to a-zA-z0-9_)
	- \W: not word
	- [a-z]: a->z english char lowcase
	- [A-Z]: A->Z Enlish char upcase


Email Regex: ([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)
Domain Regex: /https?:\/\/(?:www\.|ww2\.)?([a-zA-Z\d-]+(?:\.[a-zA-Z\d-]+)+)/

Matching {x} Repetitions:
	-Hiển thị x số lần xuất hiện của ký tự, cụm ký tự,..
	-Vd:	
		a{x} => hiển thị x số lần xuất hiện của a
Matching {x, y} Repetitions
	-Giống {x} nhưng có thể cụ thể hóa số lần chỉ định
	-Vd:
		a{x,y} => hiện thị a xuất hiện thừ x -> y lần
Matching Zero Or More Repetitions => use *
	-vd:
		a* => a xuất hiện 0 -> n lần thì lấy => TH: text='bc' thì vẫn pass

Matching One Or More Repetitions => use +
	-vd:
		a+ => a phải xuất hiện từ 1->n lần thì lấy => TH: text='bc' thì fail

Matching Word Boundaries => use \b
	- Xác định chính xác keyword theo quy tắc của UK-US
	- Ex cụ thể https://www.hackerrank.com/challenges/find-a-word/problem

Capture and Non-Capture group:
	- Khi match một string với Regex có group(), nếu pass thì result trả về chỉnhững regex có trong group
	- Non-Capture thì ngược lại, nếu muốn group đó không trả về giá trị match được, thì dùng Non-capture group
	Capture Group: ()
		- Chỉ trả về giá trị trong group khi trong 1 chuỗi Regex có ()
		- Ex: str = buinamtrung, regex = /(bui)nam(trung)/ => OP:bui trung
	Non-Capture Groups: (?:)
		- Không trả về giá trị trong group trong 1 chuỗi Regex có ()
		- Ex: str = buinamtrung, regex = /(bui)nam(?:trung)/ => OP: bui

Alternative Matching: |
	-Compare condition in () 
	-Ex: (ABC|abc) => txt="ab" (fail) txt="abc" (pass)



REX ENGINE:
Backreferences To Failed Groups:
	- (pattern)\1 => pattern = (\w,\i,abc,....), \1 pattern must repeat 1 time
	- (pattern)\1{option}: (option) time of pattern must repeat. ex: (a)\1{2} => a must repeat 2 times -> aaa(pass)
	- Practice Ex: https://www.hackerrank.com/challenges/backreferences-to-failed-groups/problem

Forward References:
	- Struc: (\2pattern_1|(pattern2))+
	- Forward reference creates a back reference to a regex that would appear later. 
	- Forward references are only useful if they're inside a repeated group. 
	- Ex: https://www.hackerrank.com/challenges/forward-references/problem

Branch Reset Group: Only support by Perl, PHP, Delphi
	- Structure: (?|(rex1)|(rex2))/1
	- Ex: https://www.hackerrank.com/challenges/branch-reset-groups/problem?h_r=next-challenge&h_v=zen

Group number: 
	-Struc: (\w)(\w)(\w)n\1\2\3
		- \1 references the first capture group(\w)
	-Ex: https://www.hackerrank.com/challenges/matching-same-text-again-again/problem





Positive lookahead: struc: regex1(?=regex2)
	- Asserts regex1 to be immediately followed by regex2
	- Lookahead is excluded from the match
	- Not match regex2, just  match regex1
	- Ex: https://www.hackerrank.com/challenges/positive-lookahead/problem

Negative lookahead: struc: regex1(?!regex2)
	- Assert regex 1 not to be imnediately followed by regex2
	- Lookahead is excluded from the match
        - Not match regex2, just match regex1
	- Ex: https://www.hackerrank.com/challenges/negative-lookahead/problem?h_r=next-challenge&h_v=zen

Positive Lookbehind: struc: (?<=regex2)regex1
	- Assert regex1 to be immediately preceded by regex2
	- Lookbehind is excluded from the match
        - Not match regex2, just match regex1

Negative Lookbehind: struc: (?<!regex1)regex1
	- Assert regex1 not to be immediately preceded by regex2
	- Lookbehind is exclude from the match
	- Not match regex2, just match regex1
